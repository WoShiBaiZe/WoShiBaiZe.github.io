<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Docker安装(Ubuntu版)]]></title>
    <url>%2F2019%2F12%2F29%2FDocker%E5%AE%89%E8%A3%85(Ubuntu%E7%89%88)%2F</url>
    <content type="text"><![CDATA[基于Ubuntu 18.04 Docker安装 1.Ubuntu更改静态IProot@ubuntu:~# vim /etc/netplan/50-cloud-init.yaml123456789101112network: ethernets: eth0: addresses: - 192.168.15.72/20 gateway4: 192.168.12.2 nameservers: addresses: - 223.5.5.5 search: [] optional: true version: 2 root@ubuntu:~# netplan apply2.Ubuntu18.04更新软件包123sudo gedit /etc/apt/sources.list # 编辑软件源apt-get update -y # 更新软件列表sudo apt-get upgrade # 跟新软件 3.Docker安装系统要求Docker CE 支持以下版本的 Ubuntu 操作系统： Artful 17.10 (Docker CE 17.11 Edge +) Xenial 16.04 (LTS) Trusty 14.04 (LTS) Docker CE 可以安装在 64 位的 x86 平台或 ARM 平台上。Ubuntu 发行版中，LTS（Long-Term-Support）长期支持版本，会获得 5 年的升级维护支持，这样的版本会更稳定，因此在生产环境中推荐使用 LTS 版本,当前最新的 LTS 版本为 Ubuntu 16.04。 卸载旧版本123$ sudo apt-get remove docker \ docker-engine \ docker.io Ubuntu 14.04 可选内核模块从 Ubuntu 14.04 开始，一部分内核模块移到了可选内核模块包 (linux-image-extra-*) ，以减少内核软件包的体积。正常安装的系统应该会包含可选内核模块包，而一些裁剪后的系统可能会将其精简掉。AUFS 内核驱动属于可选内核模块的一部分，作为推荐的 Docker 存储层驱动，一般建议安装可选内核模块包以使用 AUFS。 如果系统没有安装可选内核模块的话，可以执行下面的命令来安装可选内核模块包： 12345$ sudo apt-get update$ sudo apt-get install \ linux-image-extra-$(uname -r) \ linux-image-extra-virtual Ubuntu 16.04 +使用APT安装Ubuntu 16.04 + 上的 Docker CE 默认使用 overlay2 存储层驱动,无需手动配置。 安装必要的一些系统工具12sudo apt-get updatesudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common 安装 GPG 证书1curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add - 写入软件源信息1sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot; 更新并安装 Docker CE12sudo apt-get -y updatesudo apt-get -y install docker-ce 以上命令会添加稳定版本的 Docker CE APT 镜像源，如果需要最新或者测试版本的 Docker CE 请将 stable 改为 edge 或者 test。从 Docker 17.06 开始，edge test 版本的 APT 镜像源也会包含稳定版本的 Docker。 使用脚本自动安装在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Ubuntu 系统上可以使用这套脚本安装： 123$ curl -fsSL get.docker.com -o get-docker.sh# 可能会出现 404 错误，请移步下面的特别说明$ sudo sh get-docker.sh --mirror Aliyun 特别说明2018 年 7 月 21 日，貌似阿里云这边在做调整，故导致 Docker 的 Aliyun 安装脚本不可用，是永久性还是临时性的尚不清除，如果你已经按照之前的操作安装 Docker，请按以下步骤进行修复并重新安装 如果已经使用了 Aliyun 脚本安装并成功的 请先卸载 Docker，命令为：apt-get autoremove docker-ce 删除 /etc/apt/sources.list.d 目录下的 docker.list 文件 使用 AzureChinaCloud 镜像脚本重新安装，命令为：sudo sh get-docker.sh --mirror AzureChinaCloud 启动 Docker CE12$ sudo systemctl enable docker$ sudo systemctl start docker Ubuntu 14.04 请使用以下命令启动： 1$ sudo service docker start 建立 docker 用户组默认情况下，docker 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 root 用户和 docker 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 root 用户。因此，更好地做法是将需要使用 docker 的用户加入 docker 用户组。 建立 docker 组： 1$ sudo groupadd docker 将当前用户加入 docker 组： 1$ sudo usermod -aG docker $USER 退出当前终端并重新登录，进行如下测试 测试 Docker 是否安装正确12345678910111213141516171819202122232425262728$ docker run hello-worldUnable to find image &apos;hello-world:latest&apos; locallylatest: Pulling from library/hello-worldca4f61b1923c: Pull completeDigest: sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905cStatus: Downloaded newer image for hello-world:latestHello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https://cloud.docker.com/For more examples and ideas, visit: https://docs.docker.com/engine/userguide/ 若能正常输出以上信息，则说明安装成功。 镜像加速器阿里云登录后，搜索容器镜像服务—&gt;镜像加速器，选择适合自己的操作系统]]></content>
      <categories>
        <category>Linux、Ubuntu18.04</category>
      </categories>
      <tags>
        <tag>微服务架构、Docker、IP、系统更新、Docker、Centos 7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker安装(Centos版)]]></title>
    <url>%2F2019%2F12%2F08%2FDocker%E5%AE%89%E8%A3%85(Centos%E7%89%88)%2F</url>
    <content type="text"><![CDATA[基于Centos 7Docker安装 1.Centos7更改静态IP1234567891011root@localhost:~# vim /etc/sysconfig/network-scripts/ifcfg-ens33# 把dhcp改成staticBOOTPROTO=&quot;static&quot;# 以下为增加内容IPADDR=&quot;XXX.XXX.XXX.XXX&quot;NETMASK=&quot;255.255.255.0&quot;GATEWAY=&quot;XXX.XXX.XXX.XXX&quot;DNS1=&quot;XXX.XXX.XXX.XXX&quot;root@localhost:~# vim /etc/resolv.confnameserver xxx.xxx.xxx.xxx #第二种更改DNS方式 更改生效：1service network restart 或者 systemctl restart network 2.Centos7更新软件包与删除指定内核12345671. yum update -y # 更新系统内核，会重新下载一个新的2. uname -sr # 查看当前使用的系统内核3. rpm -q kernel # 搜索查看当前机器上所有的内核4. yum remove kernel-3.10.0-123.el7.x86_64 kernel-devel-3.10.0-123.el7.x86_64或者 rpm -e kernel-3.10.0-123.el7.x86_64 # 删除指定的内核5. reboot # 重启6. rpm -qa|grep kernel* # 再次查看所有内核 3.指定版本docker安装1234567891011121314151617181920212223242526272829301. 更新软件包 sudo yum update 2. 卸载原来安装 sudo yum remove docker \ docker-client \ docker-client-latest \ docker-common \ docker-latest \ docker-latest-logrotate \ docker-logrotate \ docker-engine3.清空docker包 rm -rf /var/lib/docker/4.安装所需包 sudo yum install -y yum-utils \ device-mapper-persistent-data \ lvm25.设置稳定存储库 sudo yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo6.安装默认最新 sudo yum install docker-ce docker-ce-cli containerd.io7.安装特定版本（查看有哪些版本） yum list docker-ce --showduplicates | sort -r8. 更换&lt;VERSION_STRING&gt;选择的版本 sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io9.启动docker并设置开机自启 sudo systemctl start docker sudo systemctl enable docker]]></content>
      <categories>
        <category>Linux、Centos7</category>
      </categories>
      <tags>
        <tag>微服务架构、Docker、IP、系统更新、Docker、Centos 7</tag>
      </tags>
  </entry>
</search>
